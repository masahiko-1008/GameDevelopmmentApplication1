#include "Scene.h"
#include "../Objects/Player/Player.h"
#include "../Objects/Enemy/BoxEnemy.h"
#include "../Objects/Enemy/WingEnemy.h"
#include "../Objects/Enemy/Harpy.h"
#include "../Objects/Enemy/GoldEnemy.h"
#include "../Utility/InputControl.h"
#include "DxLib.h"

#define D_PIVOT_CENTER

//コンストラクタ
Scene::Scene() : objects(),BackGround_image(NULL), GetRandMax(0), freamcount(0)
{

}

//デストラクタ
Scene::~Scene()
{
	//忘れ防止
	Finalize();
}

//初期化処理
void Scene::Initialize()
{
	//プレイヤーを生成する
	CreateObject<Player>(Vector2D(450.0f, 60.0f));

	//背景画像
	BackGround_image = LoadGraph("Resource/Images/BackGround.png");

	//エラーチェック
	if (BackGround_image == -1)
	{
		throw("背景の画像がありません\n");
	}
}

//更新処理
void Scene::Update()
{
	//オブジェクトリスト内のオブジェクトを更新する
	for (GameObject* obj : objects)
	{
		obj->Update();
	}

	//オブジェクト同士の当たり判定チェック
	for (int i = 0; i < objects.size(); i++)
	{
		for (int j = i + 1; j < objects.size(); j++)
		{
			//当たり判定チェック処理
			HitCheckObject(objects[i], objects[j]);
		}
	}

	//フレームカウントを加算する
	freamcount++;

	//60フレーム目に到達したら
	if (freamcount >= 60)
	{
		//カウントのリセット
		freamcount = 0;

		//ランダムに敵達が出現する
		GetRandMax = GetRand(10);
		{
			//ハコテキ
			if (GetRandMax <= 2)
			{
				CreateObject<BoxEnemy>(Vector2D(90.0f, 610.0f));
			}

			//ハネテキ
			if (GetRandMax > 2  && GetRandMax <= 5)
			{
				CreateObject<WingEnemy>(Vector2D(90.0f, 270.0f));
			}

			//ハーピー
			if (GetRandMax > 5 && GetRandMax <= 8)
			{
				CreateObject<Harpy>(Vector2D(90.0f, 400.0f));
			}

			//金テキ
			if (GetRandMax > 8  && GetRandMax <= 10)
			{
				CreateObject<GoldEnemy>(Vector2D(90.0f, 610.0f));
			}
		}
	}

}

//描画処理
void Scene::Draw() const
{   
	//背景画像
	DrawGraph(0, 0, BackGround_image, TRUE);

	//シーンに存在するオブジェクトの描画処理
	for (GameObject* obj : objects)
	{
		obj->Draw();
	}
}

//終了時処理
void Scene::Finalize()
{
	//動的配置が空なら処理を処理を終了する
	if (objects.empty())
	{
		return;
	}

	//各オブジェクトを削除する
	for (GameObject* obj : objects)
	{
		obj->Finalize();
		delete obj;
	}
	//動的配置の解放
	objects.clear();
}

#ifdef D_PIVOT_CENTER

//当たり判定チェック処理(矩形の中心で判定を取る)
void Scene::HitCheckObject(GameObject* a, GameObject* b)
{
	//2つのオブジェクトの距離を取得
	Vector2D diff = a->GetLocation() - b->GetLocation();

	//2つのオブジェクトの当たり判定の大きさを取得
	Vector2D box_size = (a->GetBoxSize() + b->GetBoxSize()) / 2.0f;

	//距離より大きさが大きい場合、Hit判定とする
	if ((fabsf(diff.x) < box_size.x) && (fabsf(diff.y) < box_size.y))
	{
		//当たったことをオブジェクトに通知する
		a->OnHitCollision(b);
		b->OnHitCollision(a);
	}
}

#else

//当たり判定チェック処理(左上頂点の座標から当たり判定計算を行う)
void Scene::HitCheckObject(GameObject* a, GameObject* b)
{
	//右上頂点座標を取得する
	Vector2D a_lower_right = a->GetLocation() + a->GetBoxSize();
	Vector2D b_lower_right = b->GetLocation() + b->GetBoxSize();

	//矩形Aと矩形Bの位置関係を調べる
	if ((a->GetLocation().x < b_lower_right.x) &&
		(a->GetLocation().y < b_lower_right.y) &&
		(a_lower_right.x > b->Getlocation().x) &&
		(a_lower_right.y > b->Getlocation().y))
	{
		//オブジェクトに対してHit判定を通知する
		a->OnHitCollsion(b);
		b->OnHitCollsion(a);
	}
}

#endif // D_PIVOT_CNETER